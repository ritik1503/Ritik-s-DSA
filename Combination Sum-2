Q-->>
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


A-->>
class Solution {
public:
    //tc-0(2^N)*KLOGK
    //sc-k*x   where x is no of distinct element
    void r(int l,int ri,int target,vector<int> &v,vector<int> &temp,vector<vector<int>> &ans)
    {
         if(target==0)
                  ans.push_back(temp); 
        for(int i=l;i<ri;i++)
        {
            if(i>l and v[i]==v[i-1])continue;
            
            if(v[i]>target)
                break;
            //push
            temp.push_back(v[i]);
            r(i+1,ri,target-v[i],v,temp,ans);
            temp.pop_back();   
        }
    }
    
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> temp;
        r(0,candidates.size(),target,candidates,temp,ans);
        return ans;
    }
};
